## ---------------------------------------------------------------------
##
## Copyright (C) 2016 by the krims authors
##
## This file is part of krims.
##
## krims is free software: you can redistribute it and/or modify
## it under the terms of the GNU Lesser General Public License as published
## by the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## krims is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with krims. If not, see <http://www.gnu.org/licenses/>.
##
## ---------------------------------------------------------------------

language: cpp
sudo: required
dist: trusty

branches:
  except:
    - dev
    - /^dev-.*$/
    - /^dev_.*$/

env:
  global:
    # Use two cores for the build
    - CORES=2
    #
    # Use a known-to-work rapidcheck seed
    - RC_PARAMS="seed=16920708173099178154 verbose_progress=1 noshrink=1"
    #
    # Dependencies we need to install
    - DEPEND_PKG=""

matrix:
  include:
    # Clang 3.5 with disabled c++14 support
    - install:
      # Repo for libstdc++-4.9-dev (libstdc++ of gcc 4.8 is buggy)
      - sudo add-apt-repository -y "ppa:ubuntu-toolchain-r/test"
      # Update and install
      - sudo apt-get update -qq
      - sudo apt-get install -y ninja-build libstdc++-4.9-dev $DEPEND_PKG
      compiler: clang
      env: CC_COMPILER="clang" CXX_COMPILER="clang++" TEST_REGEX="krims_tests_"
        EXTRA_OPTS="-DDRB_MAXIMUM_CXX_STANDARD=11"
    #
    # Clang 3.9 (has c++14)
    - install:
      # Repo for libstdc++-4.9-dev (libstdc++ of gcc 4.8 is buggy)
      - sudo add-apt-repository -y "ppa:ubuntu-toolchain-r/test"
      # Repo for clang-3.9
      - sudo wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -
      - sudo add-apt-repository -y "deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.9 main"
      # Update and install
      - sudo apt-get update -qq
      - sudo apt-get install -y ninja-build clang-3.9 libstdc++-4.9-dev $DEPEND_PKG
      compiler: clang
      env: CC_COMPILER="clang-3.9" CXX_COMPILER="clang++-3.9" TEST_REGEX="krims_tests_"
    #
    # gcc-4.8 (c++11 and without tests, since rapidcheck does not compile like this)
    - install:
      - sudo apt-get install -y ninja-build $DEPEND_PKG
      compiler: gcc
      env: CC_COMPILER="gcc" CXX_COMPILER="g++" EXTRA_OPTS="-DKRIMS_ENABLE_TESTS=OFF"
    #
    # gcc-5 (with tests and c++14)
    - install:
      # Repo for g++-5
      - sudo add-apt-repository -y "ppa:ubuntu-toolchain-r/test"
      # Update and install
      - sudo apt-get update -qq
      - sudo apt-get install -y ninja-build g++-5 $DEPEND_PKG
      compiler: gcc
      env: CC_COMPILER="gcc-5" CXX_COMPILER="g++-5" TEST_REGEX="krims_tests_"
    #
    # Clang-tidy 3.9
    - install:
      # Repo for libstdc++-4.9-dev (libstdc++ of gcc 4.8 is buggy)
      - sudo add-apt-repository -y "ppa:ubuntu-toolchain-r/test"
      # Repo for clang-3.9 and clang-tidy-3.9
      - sudo wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -
      - sudo add-apt-repository -y "deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.9 main"
      # Update and install
      - sudo apt-get update -qq
      - sudo apt-get install -y ninja-build clang-3.9 libstdc++-4.9-dev clang-tidy-3.9
      compiler: clang
      env: CC_COMPILER="clang-3.9" CXX_COMPILER="clang++-3.9" PERFORM_COMPILE=no TIDY_TARGET="clang-tidy-krims"

script:
  - cmake --version
  - ninja --version
  - mkdir build && cd build
  - cmake -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCMAKE_C_COMPILER=${CC_COMPILER}
           -DCMAKE_BUILD_TYPE=DebugRelease ${EXTRA_OPTS}
           -DAUTOCHECKOUT_MISSING_REPOS=ON
           -DRC_ENABLE_TESTS=OFF
           -DKRIMS_ENABLE_EXPERIMENTAL=ON
           -GNinja ..
  - if [ "${PERFORM_COMPILE}" != "no" ]; then cmake --build  . -- -j ${CORES}; else true; fi
  - if [ "${TEST_REGEX}" ]; then ctest --output-on-failure -R ${TEST_REGEX}; else true; fi
  - if [ "${TIDY_TARGET}" -a "$TRAVIS_PULL_REQUEST" != "false" ]; then cmake --build . --target ${TIDY_TARGET}; else true; fi
